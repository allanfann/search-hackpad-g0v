{"repos": {"twgeojson": {"repo_owner": "g0v", "updated_at": "2016-07-05T13:00:12Z", "readme_url": "https://api.github.com/repos/g0v/twgeojson/contents/README.md?ref=master", "repo_html_url": "https://github.com/g0v/twgeojson", "repo_url": "https://api.github.com/repos/g0v/twgeojson", "readme_raw": "twgeojson\n============\n\n# Synopsis\n\n```javascript\nvar county = require('twgeojson/twCounty1982');\n\nprojection = d3.geo.mercator().scale(50000).translate([-16500, 3650]);\n```\n\n# Demo\n\n* http://g0v.github.com/twgeojson/\n\n# Description\n\nThe package provides the geojson files for administrative divisions in Taiwan.\nThe data has been simplified with d3.simplify and is suitable for geographical visualisation.\nThe county level data file is about 64K in size.\n\nFor raw data or different levels of simplification, see Makefile for the rules\ngenerating them.\n\n# Installation\n\nUse npm to install all required modules, including d3:\n\n    npm install\n\n\nTo build taiwan geographic json files you'll need the following:\n * unrar - install it with 'brew install unrar' or your favorite package manager.\n\nthen build json files with make:\n\n    make twVote1982.topo.json\n    make twVillage1982.topo.json\n    make twTown1982.topo.json\n    make twCounty2010.topo.json\n\n\n# Todo\n\n* Merge subsumed polygons in the 2010 city merge\n* Town level translation for the 2010 city merge\n* Provide zip code as layer properties for towns\n* fix vote/errant.json\n* fix XXX-1 to XXX-0\n\n# Note\n\n* we used d3-plugins/simplify to simplify the output json files,\n  but d3-plugins/simplify is declared deprecated, replaced by TopoJSON and removed from github.\n  Thus, we made some changes to adopt this issue. Please use TopoJSON format instead of GeoJSON in the future.\n  \n# See Also\n\n* http://www.iot.gov.tw/ct.asp?xItem=154948&ctNode=1091\n* https://github.com/d3/d3-plugins/tree/master/simplify\n\n# CC0 1.0 Universal\n\nTo the extent possible under law, Chia-liang Kao has waived all copyright\nand related or neighboring rights to twgeojson.\n\nThis work is published from Taiwan.\n\nhttp://creativecommons.org/publicdomain/zero/1.0\n", "created_at": "2012-11-07T10:52:18Z", "repo_name": "twgeojson"}, "lvr.land.moi": {"repo_owner": "g0v", "updated_at": "2013-11-07T08:08:53Z", "readme_url": "", "repo_html_url": "https://github.com/g0v/lvr.land.moi", "repo_url": "https://api.github.com/repos/g0v/lvr.land.moi", "readme_raw": "", "created_at": "2012-11-14T16:48:56Z", "repo_name": "lvr.land.moi"}, "twbudget": {"repo_owner": "g0v", "updated_at": "2016-05-15T05:29:39Z", "readme_url": "https://api.github.com/repos/g0v/twbudget/contents/README.md?ref=master", "repo_html_url": "https://github.com/g0v/twbudget", "repo_url": "https://api.github.com/repos/g0v/twbudget", "readme_raw": "# twbudget\n### visualizing taiwan central government spending\n\n![twbudget](https://raw.github.com/g0v/twbudget/master/thumbnail.png \"twbudget\")\n\n## Prerequisites\n\n\n### Windows 7(32-bit):\n\n1.Install the correct Windows SDK from [here](http://go.microsoft.com/?linkid=7729279) for the Node modules requiring rebuild for installation such as bcrypt.\t\n\n2.Install Visual Studio 2008 Redistributables from [here](http://www.microsoft.com/downloads/details.aspx?familyid=9B2DA534-3E03-4391-8A4D-074B9F2BC1BF) for OpenSLL, which is for bcrypt.\t\n\n3.Install OpenSSL from [here](http://slproweb.com/download/Win32OpenSSL-1_0_1e.exe) for bcrypt.\t\n\n4.Same as below except \"brew\" is not available on Windows so please install below modules separately.\n\t\n### Mac OS X and [Homebrew](http://mxcl.github.io/homebrew/):\n\n\t$ brew install node        # Install nodejs and npm\n\t$ brew install brew-gem    # Install sass\n\t$ gem install sass\n\t$ brew install mongodb     # Install mongodb\n\t$ mongod                   # Run mongodb in foreground\n\n## build\n\n* `npm i` to install node packages\n\n### Running the app during development\n\n* `brunch w &`\n* `make run`\n\nThen navigate your browser to [http://localhost:8000](http://localhost:8000)\n\n## License\n\nMIT http://g0v.mit-license.org/\n", "created_at": "2012-10-21T02:02:40Z", "repo_name": "twbudget"}, "twlyparser": {"repo_owner": "g0v", "updated_at": "2016-06-24T05:35:33Z", "readme_url": "https://api.github.com/repos/g0v/twlyparser/contents/README.md?ref=master", "repo_html_url": "https://github.com/g0v/twlyparser", "repo_url": "https://api.github.com/repos/g0v/twlyparser", "readme_raw": "twlyparser\n============\n\n[![Build Status](https://travis-ci.org/g0v/twlyparser.svg?branch=master)](https://travis-ci.org/g0v/twlyparser)\n[![gemnasium](https://gemnasium.com/g0v/twlyparser.svg)](https://gemnasium.com/g0v/twlyparser)\n\nWARNING: this is work in progress and the file format is likely to change!\n\n# Prepare environment\n\nThe files with .ls extension is a LiveScript source file. \nLiveScript is a language which compiles to JavaScript.\n\nFor emacs user, please use\nhttps://github.com/YHisamatsu/livescript-mode for syntax highlight.\n\n## To install node.js and npm and LiveScript in Ubunutu\n\nThe node.js in Ubuntu is pretty old and does not work with\nLiveScript. Please use the one in chris ppa.\n\n```\n$ sudo add-apt-repository ppa:chris-lea/node.js\n$ sudo apt-get update\n$ sudo apt-get install nodejs npm\n```\n\nand some dependency\n\n    $ sudo aptitude install libcups libimage-size-perl\n\n## install required node.js packages\n\n```\n$ npm i\n\n## compile \n$ npm run prepublish\n```\n\n# If You Want to parse legislator information to JSON\n```\n# update submodule\n$ git submodule init\n$ git submodule update\ndata/twly$ git pull origin master\n\n# generate JSON file, you can input which ad you want, below will use ad=8 for example\n$ ./node_modules/.bin/lsc mly.ls ad 8 > data/mly-8.json\n\n# In begining of ad=9, source didn't provide uid of legislator, we maintain it ourself for temporary usage.\n$ ./node_modules/.bin/lsc mly_uid_by_ourself.ls > data/mly-9.json\n```\n\n# Parsing from prepared text version of gazettes:\n\n```\n# get ly-gazette in the same directory with twlyparser\n$ cd ..\n$ git clone git://github.com/g0v/ly-gazette.git\n\n# output/raw/4004.text -> output/raw/4004.md\n$ cd twlyparser\n$ ./node_modules/.bin/lsc ./format-log.ls --fromtext --gazette 4004 --dir ./output/raw\n\n# generate all gazettes for 8th AD\n$ ./node_modules/.bin/lsc ./format-log.ls --fromtext --ad 8 --dir ./output/raw\n```\n\n# Parsing from official source\n\nTo retrieve source word files of a specific gazette that is already listed in\n'data/index.json':\n\n```\n$ ./node_modules/.bin/lsc get-source.ls --gazette 4004\n\n```\n\nConvert to html with 'unoconv':\n\nYou'll need to install LibreOffice.\n\n```\n# make sure you do `git submodule init` and `git submodule update`\n$ ./node_modules/.bin/lsc populate-sitting.ls --force --gazette 4004\n```\n\n# To parse:\n\nyou may use the sample data to skip `get-source` and unoconv conversion\n\ntwlyrawdata.tgz : download from http://dl.dropbox.com/u/30657009/ly/4004.tgz\n\n```\n$ mkdir source/\n$ tar xzvf twlyrawdata.tgz -C source/ \n$ mkdir output\n\n# convert doc files to html and update data/gazettes.json with metadata\n$ ./node_modules/.bin/lsc populate-sitting.ls --dometa\n\n# generate text file from source/\n$ ./node_modules/.bin/lsc ./format-log.ls --text --gazette 4004 --dir ./output\n\n# generate markdown file from text generated above\n$ ./node_modules/.bin/lsc ./format-log.ls --fromtext --gazette 4004 --dir ./output\n\n# generate all gazettes for 8th AD\n$ ./node_modules/.bin/lsc ./format-log.ls --text --ad 8 --dir ./output\n$ ./node_modules/.bin/lsc ./format-log.ls --fromtext --ad 8 --dir ./output\n```\n\n# To generate json files from md\n\n```\n# generate specific gazette or AD\n$ ./node_modules/.bin/lsc ./md2json.ls --gazette 4004 --dir ./output\n$ ./node_modules/.bin/lsc ./md2json.ls --ad 8 --dir ./output\n\n# generate all gazettes\n$ ./node_modules/.bin/lsc ./md2json.ls --dir ../data\n```\n\n# To generate json files of gazettes (only supports interpellation for now)\n\n```\n./node_modules/.bin/lsc format-log-resource-json.ls --dir ../data\n```\n\n# generate CK csv from json\n```\n./node_modules/.bin/lsc ck_json2csv_mly.ls > mly.csv                 # ./data/mly-8.json\n./node_modules/.bin/lsc ck_json2csv_gazette.ls > gazettes.csv        # ./data/gazettes.json\n./node_modules/.bin/lsc ck_json2csv_vote.ls --dir ../ly-gazette/raw  # 3110.json 3111.json ...\n```\n\n# To bootstrap or maintain the index file cache in data/:\n\n```\nmkdir -p source/meta\nsh ./list 4004 > source/meta/4004.html\n./node_modules/.bin/lsc ./parse-list.ls source/meta/*.html\n./node_modules/.bin/lsc ./prepare-source.ls\n```\n\ndata/index.json should now be populated.\n\n# Parse ly.gov.tw flow\n\nThere are some pages of gov.tw that we can query data. such as\n\n1. http://misq.ly.gov.tw/\n1. lis.ly.gov.tw - but you cannot use this link directly for some technical reasons\n    1. go to http://npl.ly.gov.tw/do/www/homePage\n    1. choose '\u7acb\u6cd5\u9662\u8b70\u4e8b\u7cfb\u7d71'\n\n## misq\n\nThere is a script to generate bill-diff. But we need the billId of a bill to bootstrap the script. The billId could be found in misq page. use *1010509070300300* as a billId for example\n\n    ./node_modules/.bin/lsc parse-bill.ls 1010509070300300\n\ncould helps us to generate bill-diff. It might fiailed in first run, just execute it twice.\n\n## tts\n\nWe can parse motion data from lis.ly.gov.tw as well. First of all, install chrome extension  from g0v/ly-crx, then\n\n    1. open lis.ly.gov.tw (in correct way)\n    1. query motion\n    1. You will see 'download all' in the page of query result, click the button\n    1. The browser will open a new page, save the whole content of opened page to /tmp/foo.html\n\n    ./node_modules/.bin/lsc parse-tts.ls /tmp/foo.html > foo.json\n\n## Summary\n\n    ./node_modules/.bin/lsc populate-summary.ls\n\n## parse.py\n\nto parse ly-law-record and ly-statistics\n\n```\ninit_statistics(to_path)\ninit_record(to_path)\nupdate_record(json_path, output_path)\n```\n\nAll path without specificate (e.g. to_path, output_path), don't put on file type \n\n  * init_record('../ly-record/record')\n\n  * update_record('../ly-record/record.json', '../ly-record/record')\n\nAll function will generate csv and json file\n\n# API\n\n*   get-calendar-by-year(*year*, *seen*) => entries\n\n    Crawl calendar from `ly.gov.tw`\n\n# Test\n\n## Arichtecture\n\n1.  Stub response and save to .yml\n\n    ![Test architecture stub](doc/images/test_architecture_stub.png)\n\n2.  Replay fake response and compare\n\n    ![Test architecture replay](doc/images/test_architecture_replay.png)\n\n## Workflow\n\n1.  Run **npm run shot:*something*.**\n\n    Shot both cassettes and snapshots by using network\n\n    ![Test workflow shot1](doc/images/test_workflow_shot1.png)\n\n    or shot only snapshots by using the cassettes\n\n    ![Test workflow shot2](doc/images/test_workflow_shot2.png)\n\n2.  Run **npm run test:*something*.**\n\n    ![Test workflow spec](doc/images/test_workflow_spec.png)\n\n## Shot fixtures for test\n\n*   Calendar\n\n        $ npm run shot:calendar\n\nIf you don't has any cassettes under `test/fixtures/cassettes/something/*.yml`,\nit will shot both cassettes and snapshots by using network.\n\n![Crawl calendar by using network](doc/images/crawl_calendar_by_using_network.png)\n\nIf you already had,\nit will shot only snapshots by using the cassettes: `test/fixtures/cassettes/something/*.yml`.\n\n![Crawl Calendar by using cassettes](doc/images/crawl_calendar_by_using_cassettes.png)\n\n## Run test\n\n*   Run all test\n\n        $ npm run test\n\n*   Run specific test\n\n    *   Calendar\n\n            $ npm run test:calendar\n\n        ![Test Calendar](doc/images/test_calendar.png)\n\n# CC0 1.0 Universal\n\nTo the extent possible under law, Chia-liang Kao has waived all copyright\nand related or neighboring rights to twlyparser.\n\nThis work is published from Taiwan.\n\nhttp://creativecommons.org/publicdomain/zero/1.0\n", "created_at": "2012-11-14T16:22:41Z", "repo_name": "twlyparser"}, "ly.g0v.tw": {"repo_owner": "g0v", "updated_at": "2016-06-20T09:21:18Z", "readme_url": "https://api.github.com/repos/g0v/ly.g0v.tw/contents/README.md?ref=master", "repo_html_url": "https://github.com/g0v/ly.g0v.tw", "repo_url": "https://api.github.com/repos/g0v/ly.g0v.tw", "readme_raw": "ly.g0v.tw\n=========\n\n[![Coverage Status](https://coveralls.io/repos/g0v/ly.g0v.tw/badge.png?branch=master)](https://coveralls.io/r/g0v/ly.g0v.tw?branch=master)\n\nWARNING: this is work in progress and the file format is likely to change!\n\n# Usage\n\nInstall required packages:\n\n```\n$ npm install\n$ npm run build\n```\n\nStart server:\n\n```\n$ npm run dev\n```\n\nthen open http://localhost:3333/\n\n# API Endpoint\n\nBy default the frontend uses api.ly.g0v.tw.  The code is at http://github.com/g0v/api.ly\n\n# Terminologies\n\nList some terminologies which will be used in source code\n\n* sitting - \u6703\u8b70(maybe \u9662\u6703)\n* bill - \u63d0\u6848\n* debate - \u8cea\u8a62\n* motions - \u8b70\u6848\n* committee - \u59d4\u54e1\u6703\n* annoucement - \u5831\u544a\u4e8b\u9805\n* discussion - \u8a0e\u8ad6\u4e8b\u9805\n* exmotion - \u81e8\u6642\u63d0\u6848\n* interpellation - \u8cea\u8a62\u4e8b\u9805\n\n# Note\n\nWhile running deploy if following message is shown:\n\n```\nfatal: Not a valid object name: '-m'\n```\n\nIt is a bug of git fixed after 1.7.11.4. Check you git version (`git --version`) and upgrade if < 1.7.11.4.\n\n# Cordova - mobile\n\nUsing Cordova as a platform for building mobile apps\n\nInstall Cordova through npm\n\n```\n$ npm install -g cordova\n```\n\nafter you install go to the folder `contrib/ly_ios` in this repo and enter the following command:\n\n\n```\n# install emulators on ios\n$ npm install -g ios-sim\n\n# add ios platform on cordova\n$ cordova platform add ios\n\n# launching !!\n$ cordova emulate ios\n```\n\nand you are launching your app. Reference: https://github.com/apache/cordova-cli\n\n## Setting in cordova :\n\nSetting in cordova is really easy, all the settings are in `contrib/ly_ios/ly_g0v/config.xml`\n\n```\n<name>ly.g0v.tw</name>\n\n<description>\n    ly.g0v.tw - Congress Website\n</description>\n\n<author href=\"http://g0v.tw\" >\n    g0v.tw\n</author>\n\n<access origin=\"*\"/>\n\n<content src=\"http://localhost:3333\" />  <!-- which url you want to direct to -->\n<!-- <content src=\"index.html\" /> -->\n\n```\n\n# Test\n\n## Unit test Architecture\n\n1.  Stub the response of api.ly.g0v.tw and save $scope.something\n\n    ![Unit test stub](doc/images/unit_test_stub.png)\n\n2.  Compare the snapshots and $scope.something\n\n    ![Unit test compare](doc/images/unit_test_compare.png)\n\n## Run tests\n\n*   Unit test\n\n    Choose one browser to prepare the test environment, and run the commands:\n\n    *   Chrome\n\n            npm run test:unit\n\n    *   Firefox\n\n            sed -i 's/browsers: \\[\"Chrome\"\\]/browsers: \\[\"Firefox\"\\]/' test/karma.conf.ls\n            gulp --require LiveScript test:unit\n\n*   E2E test\n\n## karma\n\nReference: <http://karma-runner.github.io>\n\n## protractor\n\nTo run protractor, first you need to run server for client side code described in [Usage](#usage).\n\nThen\n\n```\n$ npm run protractor\n```\n\nReference: <https://github.com/angular/protractor>\n\n# License\n\nThe MIT license: http://g0v.mit-license.org/\n", "created_at": "2012-11-18T15:48:55Z", "repo_name": "ly.g0v.tw"}}, "last_update": 1467777146.193187}